use crate::parser::Card;

use std::{
    collections::hash_map::DefaultHasher,
    hash::{Hash, Hasher},
    path::{Path, MAIN_SEPARATOR},
};

use chrono::prelude::*;
use genanki_rs::{Deck, Field, Model, Note, Template};
use lazy_static::lazy_static;

const LIGHT_MODE_CSS: &str = include_str!("../assets/templates/light.css");
const DARK_MODE_CSS: &str = include_str!("../assets/templates/dark.css");

const FRONT_SIDE_TEMPLATE: &str = include_str!("../assets/templates/front.html");
const BACK_SIDE_TEMPLATE: &str = include_str!("../assets/templates/back.html");

lazy_static! {
    static ref LIGHT_MODEL: Model = Model::new(
        0x1337420,
        "Ankiding Model",
        vec![Field::new("Question"), Field::new("Answer"),],
        vec![Template::new("Card 1")
            .qfmt(FRONT_SIDE_TEMPLATE)
            .afmt(BACK_SIDE_TEMPLATE)],
    )
    .css(LIGHT_MODE_CSS);
    static ref DARK_MODEL: Model = Model::new(
        0x1337420,
        "Ankiding Model",
        vec![Field::new("Question"), Field::new("Answer"),],
        vec![Template::new("Card 1")
            .qfmt(FRONT_SIDE_TEMPLATE)
            .afmt(BACK_SIDE_TEMPLATE)],
    )
    .css(DARK_MODE_CSS);
}

pub fn from_cards(filename: &Path, cards: &[Card], use_dark_mode: bool) -> Deck {
    let deck_name = filename
        .to_str()
        .unwrap()
        .replace(MAIN_SEPARATOR, "::")
        .replace(".anki.md", "");

    // Create a hash from the filename to get a unique deck id as an i64
    let mut hasher = DefaultHasher::new();
    deck_name.hash(&mut hasher);
    let deck_id = hasher.finish() as i64;

    let desc = format!(
        "Generated by ankiding at {}",
        Local::now().format("%Y-%m-%d %H:%M:%S")
    );
    let mut deck = Deck::new(deck_id, &deck_name, &desc);
    let model = match use_dark_mode {
        true => DARK_MODEL.clone(),
        false => LIGHT_MODEL.clone(),
    };
    for card in cards {
        let note = Note::new(model.clone(), vec![&card.front, &card.back]).unwrap();
        deck.add_note(note);
    }
    deck
}
